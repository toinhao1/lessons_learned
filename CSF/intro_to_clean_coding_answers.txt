1.In your own words, explain what clean code is and why it is important.

A: Clean code is the practice of writing code that is simple and efficient. This is important so your code is easy to read and will not cause any issues if the overall program grows into a massive complex behemoth.

2.Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A: Planes rely on lot's of software and many people could die if sudden issues occur. Luckily with Toyota it was a small sample size and very few deaths.

3.Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

A: No it is not, there are way to many comments that explain what the code already does.
FUNCTION do(x, y)               // Creating a new function for Fahrenheit to Celsius and vice versa.
 IF y = "F" THEN
 SET z to (xâˆ’32) * (5/9)
 PRINT z
 ELSE IF y = "C" THEN
 SET z to x * 1.8000 + 32.00
 PRINT z
 END IF
END FUNCTION

4.Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

A: Yes, I would consider it to be clean code as everything is clear and concise with no extra steps or notes that are needed.

5.Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

b.The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
      APPEND book to guest.books
      SET book.status to "Checked Out"
      PRINT "Your books have been issued."
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

c.

The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION offerProducts
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     ELSE IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END IF
 END FUNCTION
END CLASS

6.Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

function isSquare(arr) {
  var newArr = [];
  var reducer = (accumulator, currentValue) => accumulator + currentValue;
  newArr = arr.reduce(reducer);
  if (Math.sqrt(newArr) % 1 === 0) {
    return Math.sqrt(newArr);
  }else {
    return newArr;
  }
}
var newNew = [5 ,5, 5,5, 20, 60];
isSquare(newNew);

7.Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function hasDuplicates(arr) {
    return (new Set(arr)).size !== arr.length;
}
