1)What is the main difference between a stack and a queue?

A: The main difference is that Stack is a LIFO data structure which means the last piece of data in comes out first. Where as a queue is like a typical line or a FIFO data structure.

2)What are the similarities between stacks and queues?

A: Stacks and queues are both data structures that utilize the push and pop methods. Both of them are either FIFO or LIFO and never pulling data from the middle of the structure.

3)Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: I would use the Stack data structure as you could easily write a function that either removes the last object written which would be the UNDO. OR redo the last option as the Stack is a LIFO structure so you wont have to search your data structure to find the last entry.

1)Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

A:
function reverseStr(str) {
  var stack = [];
  for (let i = 0; i < str.length; i++) {
    stack.push(str[i]);
  }
  var reverseIt = '';
  while (stack.length !== 0) {
   reverseIt += stack.pop();
 }
  return reverseIt
}
reverseStr('Bloc!');

2)Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

A:
function fifoLifo(queue) {
  let first, last;
  for (let i = 0; i < queue.length; i++) {
    if (i !== queue.length -1) {
      first = queue.shift();
      queue.push(first);
      console.log(queue);
    } else {
      last = queue.shift();
      console.log(queue);
    }
  }
  return last;
}
fifoLifo(['A', 'B', 'C', 'D', 'E', 'F']);

1)Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

A:

class Queue {
  constructor(value) {
    this.value = value;
  }
  enqueue(value) {
    this.value.push(value)
    return this.value;
  }
  dequeue() {
    this.value.splice(0, 1);
    return this.value;
  }
}
let customerLine = new Queue(['Joe', 'Bob', 'John']);
customerLine.enqueue('Sandra');
