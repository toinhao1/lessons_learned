1.What is a binary tree and what makes it unique to other trees?

A: A binary tree is a data structure that consists of nodes which have a head or root node followed by a left and right branch.

2.What is a heuristic?

A: Essentially a guess that the computer makes to solve a problem faster by perhaps not being as accurate.

3.What is another problem besides the shortest-path problem that requires the use of heuristics?

A: The opposite would be another problem where trying to find the longest path.

4.What is the difference between a depth-first search and a breadth-first search?

A: The depth-first search checks each branch entirely before going back and searching the other branch where as the breadth-first search looks through each level of nodes before moving to the next.

5.Explain in your own words what an undirected, a-cyclic, unweighted graph is.

A: This would be a tree that has the ability to travel in either direction.

6.What kind of graph is a binary search tree?

A: A binary search tree is a undirected and acyclic graph.

Programming Questions

1)Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

pseudocode:

FUNCTION valueCheck(value)
  SET temp to value
  WHILE temp.right exists
    SET temp.right to temp
  END WHILE
  RETURN temp
END FUNCTION

class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}
class BinarySearchTree {
    constructor() {
        this.root = null;
    }
    insert(data) {
      var newNode = new Node(data);
      if (this.root === null) {
        this.root = newNode;
      } else {
          this.insertNode(this.root, newNode);
      }
    }
    insertNode(node, newNode) {
      if (newNode.data < node.data) {
        if (node.left === null) {
          node.left = newNode
        } else {
            this.insertNode(node.left, newNode);
          }
      } else {
          if (node.right === null) {
            node.right = newNode;
          } else {
            this.insertNode(node.right, newNode)
          }
      }
    }
    getRootNode() {
      return this.root;
    }
    search(node, data) {
      if (node === null) {
        return false;
      } else if (data < node.data) {
          return this.search(node.left, data)
      } else if (data > node.data) {
          return this.search(node.right, data)
      } else {
         return true;
      }
    }
}

var bst = new BinarySearchTree();
bst.insert(3);
bst.insert(2);
bst.insert(4);
bst.insert(1);
bst.insert(5);
bst.insert(6);
bst.insert(7);
console.log(bst);

var root = bst.getRootNode();

bst.search(root, 5)

2)Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

pseudocode:

FUNCTION findDistance(start, end)
  IF start = end THEN
    RETURN 0
  END IF
  SET distance to 0
  FOR each node that start connects to
    IF the node is closer to end then start THEN
      distance ++
      RETURN distance
    END IF
  END FOR
END FUNCTION

class Node:
	def __init__(self, data):
		self.data = data
		self.left = self.right = None

def LCA(root, n1, n2):

	if root is None:
		return None

	if root.data == n1 or root.data == n2:
		return root

	left = LCA(root.left, n1, n2)
	right = LCA(root.right, n1, n2)

	if left is not None and right is not None:
		return root
	if left:
		return left
	else:
		return right
def findLevel(root, data, d, level):
	if root is None:
		return
	if root.data == data:
		d.append(level)
		return
	findLevel(root.left, data, d, level + 1)
	findLevel(root.right, data, d, level + 1)

def findDistance(root, n1, n2):
	lca = LCA(root, n1, n2)
	d1 = []
	d2 = []
	if lca:
		findLevel(lca, n1, d1, 0)
		findLevel(lca, n2, d2, 0)
		return d1[0] + d2[0]
	else:
		return -1

root = Node(1) 
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
root.right.right = Node(7)
root.right.left.right = Node(8)

print("Dist(4,5) = ", findDistance(root, 4, 5))
print("Dist(4,6) = ", findDistance(root, 4, 6))
