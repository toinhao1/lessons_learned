1.What is a binary tree and what makes it unique to other trees?

A: A binary tree is a data structure that consists of nodes which have a head or root node followed by a left and right branch.

2.What is a heuristic?

A: Essentially a guess that the computer makes to solve a problem faster by perhaps not being as accurate.

3.What is another problem besides the shortest-path problem that requires the use of heuristics?

A: The opposite would be another problem where trying to find the longest path.

4.What is the difference between a depth-first search and a breadth-first search?

A: The depth-first search checks each branch entirely before going back and searching the other branch where as the breadth-first search looks through each level of nodes before moving to the next.

5.Explain in your own words what an undirected, a-cyclic, unweighted graph is.

A: This would be a tree that has the ability to travel in either direction.

6.What kind of graph is a binary search tree?

A: A binary search tree is a undirected and acyclic graph.

Programming Questions

1)Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

pseudocode:

FUNCTION valueCheck(value)
  SET temp to value
  WHILE temp.right exists
    SET temp.right to temp
  END WHILE
  RETURN temp
END FUNCTION

function Node(val){
  this.value = val;
  this.left = null;
  this.right = null;
}

function BinarySearchTree(){
  this.root = null;
}

BinarySearchTree.prototype.push = function(val){
   var root = this.root;

   if(!root){
      this.root = new Node(val);
      return;
   }

   var currentNode = root;
   var newNode = new Node(val);

   while(currentNode){
      if(val < currentNode.value){
          if(!currentNode.left){
             currentNode.left = newNode;
             break;
          }
          else{
             currentNode = currentNode.left;
        }
     }
     else{
         if(!currentNode.right){
            currentNode.right = newNode;
            break;
         }
         else{
            currentNode = currentNode.right;
         }
     }
  }
}
BinarySearchTree.prototype.contains =  function (val) {
    if (bst.val === val) {
      var doesContain = true;;
    } else if (bst.left !== undefined && val < bst.value) {

    } else if (bst.right !== undefined && val > bst.val) {

    }
  return doesContain;
}
var bst = new BinarySearchTree();
bst.push(3);
bst.push(2);
bst.push(4);
bst.push(1);
bst.push(5);
console.log(bst);
bst.contains(4);

2)Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

pseudocode:

FUNCTION findDistance(start, end)
  IF start = end THEN
    RETURN 0
  END IF
  SET distance to 0
  FOR each node that start connects to
    IF the node is closer to end then start THEN
      distance ++
      RETURN distance
    END IF
  END FOR
END FUNCTION

class Node:
  def __init__(self, data):
    self.data = data
    self.right = None
    self.left = None

def nodePath(root, path, k):
  if root is None:
    return False

  path.append(root.data)
  if root.data == k:
    return True

  if ((root.left != None and nodePath(root.left, path, k)) or (root.right != None and nodePath(root.right, path, k))):
    return True

  path.pop()
  return False

def distance(root, n1, n2):
  if root:
    path1 = []
    nodePath(root, path1, n1)

  path2 = []
  nodePath(root, path2, n2)

  i = 0
  while i < len(n1) and i < len(n2):
    if path1[i] != path2[i]:
      break
    i = i + 1

  return (len(path1) + len(path2) - 2 * i)

root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.right.right= Node(7)
root.right.left = Node(6)
root.left.right = Node(5)
root.right.left.right = Node(8)

dist = distance(root, 2, 5)
